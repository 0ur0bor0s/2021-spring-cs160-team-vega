{"message":"expected one of `.`, `;`, `?`, `}`, or an operator, found `u32`","code":null,"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":6744,"byte_end":6747,"line_start":217,"line_end":217,"column_start":34,"column_end":37,"is_primary":true,"text":[{"text":"        assert_eq!(args.len(), 3)u32;","highlight_start":34,"highlight_end":37}],"label":"expected one of `.`, `;`, `?`, `}`, or an operator","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: expected one of `.`, `;`, `?`, `}`, or an operator, found `u32`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:217:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        assert_eq!(args.len(), 3)u32;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected one of `.`, `;`, `?`, `}`, or an operator\u001b[0m\n\n"}
{"message":"`await` is only allowed inside `async` functions and blocks","code":{"code":"E0728","explanation":"[`await`] has been used outside [`async`] function or [`async`] block.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0728\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nfn foo() {\n    wake_and_yield_once().await // `await` is used outside `async` context\n}\n```\n\n[`await`] is used to suspend the current computation until the given\nfuture is ready to produce a value. So it is legal only within\nan [`async`] context, like an `async` function or an `async` block.\n\n```edition2018\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nasync fn foo() {\n    wake_and_yield_once().await // `await` is used within `async` function\n}\n\nfn bar(x: u8) -> impl Future<Output = u8> {\n    async move {\n        wake_and_yield_once().await; // `await` is used within `async` block\n        x\n    }\n}\n```\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n[`await`]: https://doc.rust-lang.org/std/keyword.await.html\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":5748,"byte_end":5881,"line_start":183,"line_end":183,"column_start":18,"column_end":151,"is_primary":true,"text":[{"text":"    let client = Client::with_uri_str(\"mongodb+srv://ScraperUser:F70vBi0jVsFPF5je@cluster0.sdafj.mongodb.net/items?retryWrites=true&w=majority\").await.unwrap();","highlight_start":18,"highlight_end":151}],"label":"only allowed inside `async` functions and blocks","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":4301,"byte_end":4306,"line_start":145,"line_end":145,"column_start":15,"column_end":20,"is_primary":false,"text":[{"text":"pub extern fn crawl(search_item: &str, page_nums: u32) -> std::io::Result<()> {","highlight_start":15,"highlight_end":20}],"label":"this is not `async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0728]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `await` is only allowed inside `async` functions and blocks\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:183:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0mfn crawl(search_item: &str, page_nums: u32) -> std::io::Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is not `async`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| ...\u001b[0m\u001b[0ment = Client::with_uri_str(\"mongodb+srv://ScraperUser:F70vBi0jVsFPF5je@cluster0.sdafj.mongodb.net/items?retryWrites=true&w=majority\").await.un\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9monly allowed inside `async` functions and blocks\u001b[0m\n\n"}
{"message":"`await` is only allowed inside `async` functions and blocks","code":{"code":"E0728","explanation":"[`await`] has been used outside [`async`] function or [`async`] block.\n\nErroneous code example:\n\n```edition2018,compile_fail,E0728\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nfn foo() {\n    wake_and_yield_once().await // `await` is used outside `async` context\n}\n```\n\n[`await`] is used to suspend the current computation until the given\nfuture is ready to produce a value. So it is legal only within\nan [`async`] context, like an `async` function or an `async` block.\n\n```edition2018\n# use std::pin::Pin;\n# use std::future::Future;\n# use std::task::{Context, Poll};\n#\n# struct WakeOnceThenComplete(bool);\n#\n# fn wake_and_yield_once() -> WakeOnceThenComplete {\n#     WakeOnceThenComplete(false)\n# }\n#\n# impl Future for WakeOnceThenComplete {\n#     type Output = ();\n#     fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<()> {\n#         if self.0 {\n#             Poll::Ready(())\n#         } else {\n#             cx.waker().wake_by_ref();\n#             self.0 = true;\n#             Poll::Pending\n#         }\n#     }\n# }\n#\nasync fn foo() {\n    wake_and_yield_once().await // `await` is used within `async` function\n}\n\nfn bar(x: u8) -> impl Future<Output = u8> {\n    async move {\n        wake_and_yield_once().await; // `await` is used within `async` block\n        x\n    }\n}\n```\n\n[`async`]: https://doc.rust-lang.org/std/keyword.async.html\n[`await`]: https://doc.rust-lang.org/std/keyword.await.html\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":6258,"byte_end":6298,"line_start":198,"line_end":198,"column_start":25,"column_end":65,"is_primary":true,"text":[{"text":"    let insert_result = collection.insert_many(docs, None).await;","highlight_start":25,"highlight_end":65}],"label":"only allowed inside `async` functions and blocks","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\main.rs","byte_start":4301,"byte_end":4306,"line_start":145,"line_end":145,"column_start":15,"column_end":20,"is_primary":false,"text":[{"text":"pub extern fn crawl(search_item: &str, page_nums: u32) -> std::io::Result<()> {","highlight_start":15,"highlight_end":20}],"label":"this is not `async`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0728]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `await` is only allowed inside `async` functions and blocks\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:198:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0mpub extern fn crawl(search_item: &str, page_nums: u32) -> std::io::Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mthis is not `async`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    let insert_result = collection.insert_many(docs, None).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9monly allowed inside `async` functions and blocks\u001b[0m\n\n"}
{"message":"unused import: `fs::OpenOptions`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":39,"byte_end":54,"line_start":1,"line_end":1,"column_start":40,"column_end":55,"is_primary":true,"text":[{"text":"use std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};","highlight_start":40,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":37,"byte_end":54,"line_start":1,"line_end":1,"column_start":38,"column_end":55,"is_primary":true,"text":[{"text":"use std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};","highlight_start":38,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `fs::OpenOptions`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:40\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `options::ClientOptions`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":257,"byte_end":279,"line_start":8,"line_end":8,"column_start":23,"column_end":45,"is_primary":true,"text":[{"text":"use mongodb::{Client, options::ClientOptions, bson::doc};","highlight_start":23,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\main.rs","byte_start":255,"byte_end":279,"line_start":8,"line_end":8,"column_start":21,"column_end":45,"is_primary":true,"text":[{"text":"use mongodb::{Client, options::ClientOptions, bson::doc};","highlight_start":21,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `options::ClientOptions`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:8:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse mongodb::{Client, options::ClientOptions, bson::doc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`main` function not found in crate `ecomm_crawler`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":0,"byte_end":6939,"line_start":1,"line_end":227,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"use std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};","highlight_start":1,"highlight_end":73},{"text":"use select::document::Document;","highlight_start":1,"highlight_end":32},{"text":"use select::predicate::{Name, And, Class};","highlight_start":1,"highlight_end":43},{"text":"use select::node;","highlight_start":1,"highlight_end":18},{"text":"use std::fmt;","highlight_start":1,"highlight_end":14},{"text":"use reqwest::Url;","highlight_start":1,"highlight_end":18},{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":37},{"text":"use mongodb::{Client, options::ClientOptions, bson::doc};","highlight_start":1,"highlight_end":58},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Data structure to hold item details","highlight_start":1,"highlight_end":40},{"text":"#[derive(Serialize, Deserialize, Debug)]","highlight_start":1,"highlight_end":41},{"text":"struct ItemContent {","highlight_start":1,"highlight_end":21},{"text":"    buy_link: String,","highlight_start":1,"highlight_end":22},{"text":"    name: String,","highlight_start":1,"highlight_end":18},{"text":"    price: f32,","highlight_start":1,"highlight_end":16},{"text":"    img_link: String","highlight_start":1,"highlight_end":21},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"impl fmt::Display for ItemContent {","highlight_start":1,"highlight_end":36},{"text":"    // This trait requires `fmt` with this exact signature.","highlight_start":1,"highlight_end":60},{"text":"    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {","highlight_start":1,"highlight_end":59},{"text":"        // Write strictly the first element into the supplied output","highlight_start":1,"highlight_end":69},{"text":"        // stream: `f`. Returns `fmt::Result` which indicates whether the","highlight_start":1,"highlight_end":74},{"text":"        // operation succeeded or failed. Note that `write!` uses syntax which","highlight_start":1,"highlight_end":79},{"text":"        // is very similar to `println!`.","highlight_start":1,"highlight_end":42},{"text":"        return write!(f, \"{}\", self.name);","highlight_start":1,"highlight_end":43},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Parse url and make sure that it is of valid format","highlight_start":1,"highlight_end":55},{"text":"fn normalize_url(url: &str) -> Option<&str> {","highlight_start":1,"highlight_end":46},{"text":"    let new_url = Url::parse(url);","highlight_start":1,"highlight_end":35},{"text":"    match new_url {","highlight_start":1,"highlight_end":20},{"text":"        Ok(_new_url) => Some(url),","highlight_start":1,"highlight_end":35},{"text":"        Err(_e) => None,","highlight_start":1,"highlight_end":25},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Turn select::node::Node into an ItemContent object","highlight_start":1,"highlight_end":55},{"text":"fn conv_to_item_content(node: node::Node) -> Option<ItemContent> {","highlight_start":1,"highlight_end":67},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //  println!(\"Node context: {}\\n\", node.html());","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let buy_link = node","highlight_start":1,"highlight_end":24},{"text":"        .find(And(Name(\"a\"), Class(\"s-item__link\")))","highlight_start":1,"highlight_end":53},{"text":"        .filter_map(|n| n.attr(\"href\"))","highlight_start":1,"highlight_end":40},{"text":"        .filter_map(normalize_url)","highlight_start":1,"highlight_end":35},{"text":"        .next();","highlight_start":1,"highlight_end":17},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    //   println!(\"{}\\n\", buy_link.unwrap());","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let name = node","highlight_start":1,"highlight_end":20},{"text":"        .find(And(Name(\"h3\"), Class(\"s-item__title\")))","highlight_start":1,"highlight_end":55},{"text":"        .next()","highlight_start":1,"highlight_end":16},{"text":"        .unwrap()","highlight_start":1,"highlight_end":18},{"text":"        .children()","highlight_start":1,"highlight_end":20},{"text":"        .flat_map(|n| n.as_text())","highlight_start":1,"highlight_end":35},{"text":"        .next();","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //  println!(\"{}\\n\", name.unwrap());","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let price_str = node","highlight_start":1,"highlight_end":25},{"text":"        .find(And(Name(\"span\"), Class(\"s-item__price\")))","highlight_start":1,"highlight_end":57},{"text":"        .next()","highlight_start":1,"highlight_end":16},{"text":"        .unwrap()","highlight_start":1,"highlight_end":18},{"text":"        .children()","highlight_start":1,"highlight_end":20},{"text":"        .flat_map(|n| n.as_text())","highlight_start":1,"highlight_end":35},{"text":"        .next();","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //  println!(\"{}\\n\", price_str.unwrap());","highlight_start":1,"highlight_end":46},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let img_link = node","highlight_start":1,"highlight_end":24},{"text":"        .find(Name(\"img\"))","highlight_start":1,"highlight_end":27},{"text":"        .filter_map(|n| n.attr(\"src\"))","highlight_start":1,"highlight_end":39},{"text":"        .filter_map(normalize_url)","highlight_start":1,"highlight_end":35},{"text":"        .next();","highlight_start":1,"highlight_end":17},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //  println!(\"{}\\n\", img_link.unwrap());","highlight_start":1,"highlight_end":45},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    if buy_link.is_some() && name.is_some() && price_str.is_some() && img_link.is_some() {","highlight_start":1,"highlight_end":91},{"text":"        // Convert price from string to price","highlight_start":1,"highlight_end":46},{"text":"        let price = FromStr::from_str(price_str.unwrap()","highlight_start":1,"highlight_end":57},{"text":"            .split(\"$\")","highlight_start":1,"highlight_end":24},{"text":"            .collect::<Vec<&str>>()[1]);","highlight_start":1,"highlight_end":41},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        match price {","highlight_start":1,"highlight_end":22},{"text":"            Ok(price) => { ","highlight_start":1,"highlight_end":28},{"text":"                Some(ItemContent {","highlight_start":1,"highlight_end":35},{"text":"                    buy_link: buy_link.unwrap().to_string(),","highlight_start":1,"highlight_end":61},{"text":"                    name: name.unwrap().to_string(),","highlight_start":1,"highlight_end":53},{"text":"                    price: price,","highlight_start":1,"highlight_end":34},{"text":"                    img_link: img_link.unwrap().to_string()","highlight_start":1,"highlight_end":60},{"text":"                }) ","highlight_start":1,"highlight_end":20},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            Err(e) => {","highlight_start":1,"highlight_end":24},{"text":"                println!(\"ERROR: {}\", e);","highlight_start":1,"highlight_end":42},{"text":"                None","highlight_start":1,"highlight_end":21},{"text":"            } ","highlight_start":1,"highlight_end":15},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    } else {","highlight_start":1,"highlight_end":13},{"text":"        None","highlight_start":1,"highlight_end":13},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// From html body extract relavant content and store into object vector","highlight_start":1,"highlight_end":73},{"text":"fn extract_content(html: &str) -> Vec<ItemContent> {","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Get document object for only the html content of the search results on the page","highlight_start":1,"highlight_end":87},{"text":"    let items = Document::from(&*Document::from(html)","highlight_start":1,"highlight_end":54},{"text":"                                            .find(Class(\"srp-results\"))","highlight_start":1,"highlight_end":72},{"text":"                                            .next()","highlight_start":1,"highlight_end":52},{"text":"                                            .unwrap()","highlight_start":1,"highlight_end":54},{"text":"                                            .inner_html());","highlight_start":1,"highlight_end":60},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Return vector object of ItemContent objs representing extracted data","highlight_start":1,"highlight_end":76},{"text":"    items","highlight_start":1,"highlight_end":10},{"text":"        .find(And(Name(\"li\"), Class(\"s-item\")))","highlight_start":1,"highlight_end":48},{"text":"        .filter_map(conv_to_item_content)","highlight_start":1,"highlight_end":42},{"text":"        .collect::<Vec<ItemContent>>()","highlight_start":1,"highlight_end":39},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"/// Convert objects to one json string","highlight_start":1,"highlight_end":39},{"text":"fn structs_to_json(contents: &Vec<ItemContent>) -> String {","highlight_start":1,"highlight_end":60},{"text":"    let mut json_payload: String = \"[\".to_owned();","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Add each obj to the json string","highlight_start":1,"highlight_end":39},{"text":"    for item in contents {","highlight_start":1,"highlight_end":27},{"text":"        let json_obj = &*serde_json::to_string(&item).unwrap();","highlight_start":1,"highlight_end":64},{"text":"        json_payload.push_str(json_obj);","highlight_start":1,"highlight_end":41},{"text":"        json_payload.push_str(\",\");","highlight_start":1,"highlight_end":36},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    json_payload.pop();","highlight_start":1,"highlight_end":24},{"text":"    json_payload.push_str(\"]\");","highlight_start":1,"highlight_end":32},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    json_payload","highlight_start":1,"highlight_end":17},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"// needs to become regular function unless node.js can call the rust exe.","highlight_start":1,"highlight_end":74},{"text":"// #[actix_rt::main]","highlight_start":1,"highlight_end":21},{"text":"// pub async fn main() -> std::io::Result<()> {","highlight_start":1,"highlight_end":48},{"text":"#[no_mangle]","highlight_start":1,"highlight_end":13},{"text":"pub extern fn crawl(search_item: &str, page_nums: u32) -> std::io::Result<()> {","highlight_start":1,"highlight_end":80},{"text":"    // let args: Vec<String> = env::args().collect();","highlight_start":1,"highlight_end":54},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Return if there are not 2 arguments ","highlight_start":1,"highlight_end":44},{"text":"    // assert_eq!(args.len(), 3)u32;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Create url","highlight_start":1,"highlight_end":18},{"text":"    // let search_item = &args[1];","highlight_start":1,"highlight_end":35},{"text":"    // let page_nums: u32 = *&args[2].parse::<u32>().unwrap() - 1;","highlight_start":1,"highlight_end":67},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"    // Create client to send server requests","highlight_start":1,"highlight_end":45},{"text":"    let client = reqwest::blocking::Client::new();","highlight_start":1,"highlight_end":51},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Vector to store data objs","highlight_start":1,"highlight_end":33},{"text":"    let mut item_vec: Vec<ItemContent> = Vec::new();","highlight_start":1,"highlight_end":53},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Iterate through each page","highlight_start":1,"highlight_end":33},{"text":"    for n in 0..=page_nums {","highlight_start":1,"highlight_end":29},{"text":"        // Request html content","highlight_start":1,"highlight_end":32},{"text":"        let page_url = &*format!(\"{}{}{}{}\", \"https://www.ebay.com/sch/i.html?_from=R40&_nkw=\", search_item, \"&_sacat=0&_pgn=\", n);","highlight_start":1,"highlight_end":132},{"text":"        let mut res = client.get(page_url).send().unwrap();","highlight_start":1,"highlight_end":60},{"text":"        println!(\"Status for {}: {}\", page_url, res.status());","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Store html and convert from u8 to str primitive","highlight_start":1,"highlight_end":59},{"text":"        let mut body: Vec<u8> = Vec::new();","highlight_start":1,"highlight_end":44},{"text":"        res.read_to_end(&mut body).expect(\"Unable to read html content\");","highlight_start":1,"highlight_end":74},{"text":"        let body_str = String::from_utf8_lossy(&body);","highlight_start":1,"highlight_end":55},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Extract the contents ","highlight_start":1,"highlight_end":33},{"text":"        let mut page_items: Vec<ItemContent> = extract_content(&body_str);","highlight_start":1,"highlight_end":75},{"text":"        item_vec.append(&mut page_items);","highlight_start":1,"highlight_end":42},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Convert to json and write to file    ","highlight_start":1,"highlight_end":45},{"text":"    //let payload: String = structs_to_json(&item_vec);","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    //Establish connection to db and write documents to ebay-items","highlight_start":1,"highlight_end":67},{"text":"    let client = Client::with_uri_str(\"mongodb+srv://ScraperUser:F70vBi0jVsFPF5je@cluster0.sdafj.mongodb.net/items?retryWrites=true&w=majority\").await.unwrap();","highlight_start":1,"highlight_end":161},{"text":"    let database = client.database(\"items\");","highlight_start":1,"highlight_end":45},{"text":"    let collection = database.collection(\"ebay-items\");","highlight_start":1,"highlight_end":56},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let mut docs = vec![];","highlight_start":1,"highlight_end":27},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    for item in item_vec {","highlight_start":1,"highlight_end":27},{"text":"        docs.push(doc! {","highlight_start":1,"highlight_end":25},{"text":"            \"buy_link\": item.buy_link,","highlight_start":1,"highlight_end":39},{"text":"            \"name\": item.name,","highlight_start":1,"highlight_end":31},{"text":"            \"price\": item.price,","highlight_start":1,"highlight_end":33},{"text":"            \"img_link\": item.img_link","highlight_start":1,"highlight_end":38},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    let insert_result = collection.insert_many(docs, None).await;","highlight_start":1,"highlight_end":66},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    println!(\"{:#?}\", insert_result);","highlight_start":1,"highlight_end":38},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Write to file","highlight_start":1,"highlight_end":21},{"text":"    /*let mut file = OpenOptions::new()","highlight_start":1,"highlight_end":40},{"text":"        .write(true)","highlight_start":1,"highlight_end":21},{"text":"        .create(true)","highlight_start":1,"highlight_end":22},{"text":"        .truncate(true)","highlight_start":1,"highlight_end":24},{"text":"        .open(\"results.json\")?;","highlight_start":1,"highlight_end":32},{"text":"    file.write_all(payload.as_bytes())?;*/","highlight_start":1,"highlight_end":43},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // #[actix_rt::main]","highlight_start":1,"highlight_end":25},{"text":"    pub async fn main() -> () {","highlight_start":1,"highlight_end":32},{"text":"        let args: Vec<String> = env::args().collect();","highlight_start":1,"highlight_end":55},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"        // Return if there are not 2 arguments ","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(args.len(), 3)u32;","highlight_start":1,"highlight_end":38},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"        // Create url","highlight_start":1,"highlight_end":22},{"text":"        let search_item = &args[1];","highlight_start":1,"highlight_end":36},{"text":"        let page_nums: u32 = *&args[2].parse::<u32>().unwrap() - 1;","highlight_start":1,"highlight_end":68},{"text":"        crawl(search_item, page_nums);","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    Ok(())","highlight_start":1,"highlight_end":11},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"the main function must be defined at the crate level (in `src\\main.rs`)","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"here is a function named `main`","code":null,"level":"note","spans":[{"file_name":"src\\main.rs","byte_start":6575,"byte_end":6924,"line_start":213,"line_end":223,"column_start":5,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn main() -> () {","highlight_start":5,"highlight_end":32},{"text":"        let args: Vec<String> = env::args().collect();","highlight_start":1,"highlight_end":55},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"        // Return if there are not 2 arguments ","highlight_start":1,"highlight_end":48},{"text":"        assert_eq!(args.len(), 3)u32;","highlight_start":1,"highlight_end":38},{"text":"    ","highlight_start":1,"highlight_end":5},{"text":"        // Create url","highlight_start":1,"highlight_end":22},{"text":"        let search_item = &args[1];","highlight_start":1,"highlight_end":36},{"text":"        let page_nums: u32 = *&args[2].parse::<u32>().unwrap() - 1;","highlight_start":1,"highlight_end":68},{"text":"        crawl(search_item, page_nums);","highlight_start":1,"highlight_end":39},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"you have one or more functions named `main` not defined at the crate level","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"either move the `main` function definitions or attach the `#[main]` attribute to one of them","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `main` function not found in crate `ecomm_crawler`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse select::document::Document;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse select::predicate::{Name, And, Class};\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse select::node;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe main function must be defined at the crate level (in `src\\main.rs`)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: here is a function named `main`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:213:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn main() -> () {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let args: Vec<String> = env::args().collect();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // Return if there are not 2 arguments \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        crawl(search_item, page_nums);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: you have one or more functions named `main` not defined at the crate level\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: either move the `main` function definitions or attach the `#[main]` attribute to one of them\u001b[0m\n\n"}
{"message":"unused import: `io::prelude`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\main.rs","byte_start":56,"byte_end":67,"line_start":1,"line_end":1,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"use std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `io::prelude`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:57\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse std::{io::Read, str::FromStr, env, fs::OpenOptions, io::prelude::*};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors; 3 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors; 3 warnings emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0601, E0728.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0601, E0728.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0601`.\u001b[0m\n"}
